/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.MultiPoint(),
    geometry2 = /* color: #292929 */ee.Geometry.Polygon(
        [[[-127.4853515625, 30.86451022625836],
          [-111.5771484375, 30.675715404167743],
          [-112.32421875, 43.26120612479979],
          [-127.44140625, 42.94033923363181]]]),
    geometry3 = /* color: #0b4a8b */ee.Geometry.LinearRing(
        [[-127.4853515625, 42.94033923363181],
         [-112.236328125, 43.19716728250127],
         [-111.62109375, 30.751277776257812],
         [-127.4853515625, 30.826780904779778],
         [-127.4853515625, 42.94033923363181]]),
    geometry4 = /* color: #ffc82d */ee.Geometry.Point([-122.442626953125, 37.7337970712443]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Load the primary collection: a California polygon.
var cali = ee.FeatureCollection('ft:1fRY18cjsHzDgGiJiS2nnpUU3v9JPDc2HNaR7Xk8')
  .filter(ee.Filter.eq('Name', 'California'));

// Load the secondary collection: WRS-2 polygons.
var wrs = ee.FeatureCollection('ft:1_RZgjlcqixp-L9hyS6NYGqLaKOlnhSC35AB5M5Ll');

// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

// Define a save all join.
var saveAllJoin = ee.Join.saveAll({
  matchesKey: 'scenes',
});

// Apply the join.
var intersectJoined = saveAllJoin.apply(cali, wrs, spatialFilter);



//////////////////////////// DISTANCE //////////////////////////////////////////////////
//////////////////////////// DISTANCE //////////////////////////////////////////////////

// A rectangle representing Bangui, Central African Republic.
//var geometry = ee.Geometry.Rectangle([18.5229, 4.3491, 18.5833, 4.4066]);

// Create a source image where the geometry is 1, everything else is 0.
var sources = ee.Image().toByte().paint(geometry4, 1);

// Mask the sources image with itself.
sources = sources.updateMask(sources);

// The cost data is generated from classes in ESA/GLOBCOVER.
var cover = ee.Image('ESA/GLOBCOVER_L4_200901_200912_V2_3').select(0);

// Classes 60, 80, 110, 140 have cost 1.
// Classes 40, 90, 120, 130, 170 have cost 2.
// Classes 50, 70, 150, 160 have cost 3.
var cost =
  cover.eq(60).or(cover.eq(80)).or(cover.eq(110)).or(cover.eq(140))
      .multiply(1).add(
  cover.eq(40).or(cover.eq(90)).or(cover.eq(120)).or(cover.eq(130))
    .or(cover.eq(170))
      .multiply(2).add(
  cover.eq(50).or(cover.eq(70)).or(cover.eq(150)).or(cover.eq(160))
      .multiply(3)));

// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 80 * 1000 // 80 kilometers
});

// Display the results
//Map.setCenter(18.71, 4.2, 9);
//Map.addLayer(cover, {}, 'Globcover');
Map.addLayer(cumulativeCost, {min: 0, max: 5e4}, 'accumulated cost');
Map.addLayer(geometry4, {color: 'FF0000'}, 'source geometry');
    
    
// Get the result and display it.
var intersected = ee.FeatureCollection(ee.List(intersectJoined.first().get('scenes')));
Map.centerObject(cali);
//Map.addLayer(intersected, {}, 'WRS-2 polygons');
Map.addLayer(cali, {color: 'FF0000'}, 'California polygon');