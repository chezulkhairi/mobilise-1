/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var globcover = ee.Image("ESA/GLOBCOVER_L4_200901_200912_V2_3"),
    geometry = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[13.271484375, -0.36254640877525024],
          [15.853271484375, 1.087581167162357],
          [13.33740234375, 4.1382430839837125],
          [11.2939453125, 2.9540126939036564]]]),
    geometry2 = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[9.656982421875, -4.0779735342817265],
          [15.50445556640625, -0.7003609764007139],
          [14.30694580078125, 2.391578170592406],
          [8.1463623046875, -0.6344474832838974]]]),
    imageCollection = ee.ImageCollection("LANDSAT/LC08/C01/T1_TOA"),
    geometry3 = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[17.369384765625, -3.754634090910913],
          [21.73095703125, -1.318243056862001],
          [18.720703125, 4.072494259167451],
          [14.43603515625, 2.4601811810210052]]]),
    geometry4 = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[13.933346307435045, 0.8913726002425305],
          [21.808957744508916, 0.880378047052543],
          [21.544034195832296, 6.063997479498714],
          [13.715423898426252, 5.867010954034781]]]),
    imageCollection2 = ee.ImageCollection("MODIS/051/MCD12Q1"),
    imageCollection3 = ee.ImageCollection("LANDSAT/LC08/C01/T1_TOA");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
    // Extract the landcover band
    var landcover = globcover.select('landcover');
    // Clip the image to the polygon geometry
    var landcover_roi = landcover.clip(geometry);
    // Add a map layer of the landcover clipped to the polygon.
    
/////////////////////////////////////////////////////////////////////
var spatialFiltered = imageCollection.filterBounds(geometry2);
print('spatialFiltered', spatialFiltered);

var temporalFiltered = spatialFiltered.filterDate('2008-01-01', '2015-12-31');
print('temporalFiltered', temporalFiltered);

// This will sort from least to most cloudy.
var sorted = temporalFiltered.sort('CLOUD_COVER');

// Get the first (least cloudy) image.
var scene = ee.Image(sorted.first());

Map.addLayer(scene);



//////////////////////////////////////////////////////////////////////
    
    Map.addLayer(landcover_roi);
    // Load a Landsat 8 image.
//var image = ee.Image('LANDSAT/LC08/C01/T1_TOA/LC08_044034_20140318');

// Load a raw Landsat scene and display it.
//var sraw = imageCollection3.filterBounds(geometry3); //ee.Image('LANDSAT/LC08/C01/T1/LC08_044034_20140318');
// This function adds a band representing the image timestamp.

///////////////////////////////////////////////////////////////////////////
// Load a Landsat 8 collection for a single path-row.
var collection = ee.ImageCollection('LANDSAT/LC08/C01/T1_TOA')
  .filter(ee.Filter.eq('WRS_PATH', 44))
  .filter(ee.Filter.eq('WRS_ROW', 34));
  

var addTime = function(image) {
  return image.addBands(image.metadata('system:time_start'));
};

// This function uses a conditional statement to return the image if
// the solar elevation > 40 degrees.  Otherwise it returns a zero image.
var conditional = function(image) {
  return ee.Algorithms.If(ee.Number(image.get('SUN_ELEVATION')).gt(40),
                          image,
                          ee.Image(0));
};

var raw = collection.map(addTime);
//var raw=collection.map(conditional).toList(100);
// This function adds a band representing the image timestamp.

//Map.centerObject(raw, 10);
//Map.addLayer(raw, {bands: ['B4', 'B3', 'B2'], min: 6000, max: 12000}, 'raw');
//Map.centerObject(raw, 9);
// Convert the raw data to radiance.
//var radiance = ee.Algorithms.Landsat.calibratedRadiance(raw);
//Map.addLayer(radiance, {bands: ['B4', 'B3', 'B2'], max: 90}, 'radiance');

// Convert the raw data to top-of-atmosphere reflectance.
//var toa = ee.Algorithms.Landsat.TOA(raw);
//
//Map.addLayer(toa, {bands: ['B4', 'B3', 'B2'], max: 0.2}, 'toa reflectance');
//      
//
// Compute the EVI using an expression.
//var evi = image.expression(
//    '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
//      'NIR': image.select('B5'),
//      'RED': image.select('B4'),
//      'BLUE': image.select('B2')
//});;

Map.centerObject(landcover_roi, 9);
//Map.addLayer(evi, {min: -1, max: 1, palette: ['FF0000', '00FF00']});
//Map.addLayer(evi.clip(geometry3), {min: -1, max: 1, palette: ['FF0000', '00FF00']});    
    
    
    
    // Print out the frequency of landcover occurrence for the polygon.
    var frequency = landcover.reduceRegion({
      reducer:ee.Reducer.frequencyHistogram(),
      geometry:geometry,
      scale:1000
    });
    print('landcover frequency', frequency.get('landcover'));
    
    
    
///////////////////////////////////////////////////////////////////////

// Load 2012 MODIS land cover and select the IGBP classification.
var cover = ee.Image('MODIS/051/MCD12Q1/2012_01_01').select('Land_Cover_Type_1');
//var ss = cover.filterBounds(geometry4);
//var st = ee.Image(ss);
// Define a palette for the 18 distinct land cover classes.
var igbpPalette = [
  'aec3d4', // water
  '152106', '225129', '369b47', '30eb5b', '387242', // forest
  '6a2325', 'c3aa69', 'b76031', 'd9903d', '91af40',  // shrub, grass
  '111149', // wetlands
  'cdb33b', // croplands
  'cc0013', // urban
  '33280d', // crop mosaic
  'd7cdcc', // snow and ice
  'f7e084', // barren
  '6f6f6f'  // tundra
];

// Specify the min and max labels and the color palette matching the labels.
//Map.setCenter(-99.229, 40.413, 5);
Map.addLayer(cover.clip(geometry4),
             {min: 0, max: 17, palette: igbpPalette},
             'IGBP classification');
    


////////////////////////////////////////////////////////////////////////